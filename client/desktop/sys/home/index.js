import React, { Component } from 'react';

import style from './index.less';

class Home extends Component {
  // static async getInitialProps() {
  //   const res = await Fetch.get('/home/query');
  //   return {
  //     data: res,
  //   };
  // }
  render() {
    return (
      <div className={style.page}>
        <div className={style.beian}>
          <code><pre>
          {`
  移动端很多人都知道可以使用bootstrap框架，但是随着时间的推移，其实rem + vw布局也非常好用。之前没有火是因为，vw在Android4.4之前的版本不兼容。
  bootstrap和rem + vw布局选择，如果你的客户基本都是在移动端，那么rem + vw布局可能是更好的选择。

  什么是VW
  就是相对于浏览器viewport尺寸的单位，具体包括下面4个：

  vw – 视区宽度百分值
  vh – 视区高度百分值
  vmin – vw或vh，取小的那个
  vmax – vw或vh，取大的那个
  如何使用rem + vw布局
  之前适应移动端，我是使用媒体查询的，相信不少同学也是跟我一样。但是媒体查询来适配，有个比较大的缺点, 比如说只能适配一个区间，但是我320宽度的手机匹配好了，可能在375宽的手机上就比较难看，比如可能margin太大了。
  况且现在手机分辨率，那是看的人眼花缭乱。如果使用rem作为基本尺寸单位，用vw来计算并设置html根的字体大小，那就能实现在各个手机分辨率下，布局完美的展现。

  移动端布局，相信很多人都有自己的一套兼容的方式。这里我也聊聊自己的经验。
  一、百分比布局
  我最开始的是用百分比布局的，这样的做法的话是比较费时间的，有些细节的地方还需要用媒体查询来做兼容。做起来挺费时间，而且对于设计稿的还原也不好。所以这里>也不怎么推荐。

  二、固定的设备宽度
  在做移动开发的时候很多人都会加上viewport的配置，
  那么固定设备宽度的布局就是根据这个来设置的，将viewport里面的宽度width设置成设计稿的宽度，也就是说原本是width=device-width，即宽度为设备的宽度，假如在iphone6上显示的时候，那么页面的宽度就是375px; 当我们将width设置成设计稿的宽度的，假如设计稿是750px，而我们的css也按设计的尺寸来做，例如一个图片是200px*200px，那么在css上也是宽高都是写200px,也就是1：1的比例。那么在375px的手机上显示的时候，就会缩小2倍显示，以此类推，在320px的宽度的时候，就会缩小2.3倍显示，在414px的宽度的时候就会缩小1.8倍。
  这样的写法是会比较好的还原设计稿，而且速度也会比较快，但是这样也有缺点，在缩>小的时候有些设备会比较模糊，因为你强行将设备放大了。

  三、rem布局
  我现在常用的移动端布局主要是用rem布局，这个应该是比较多人使用的，也是比较流行的。使用rem布局优点是可以适应多个屏幕 ，也比较好的还原设计稿。在有些地方需要一屏显示完设计稿的时候，可能需要用到vh,或是百分比。
  rem布局简单来说就是根据页面的font-size的大小来设置页面元素的属性;

                `}</pre>
          </code>
        </div>
      </div>
    );
  }
}
export default Home;
